{"version":3,"sources":["../src/notion-compat-api.ts","../src/convert-color.ts","../src/convert-rich-text.ts","../src/convert-time.ts","../src/convert-block.ts","../src/convert-page.ts"],"sourcesContent":["import * as notion from 'notion-types'\nimport type { Client } from '@notionhq/client'\nimport { parsePageId } from 'notion-utils'\nimport PQueue from 'p-queue'\n\nimport * as types from './types'\nimport { convertPage } from './convert-page'\n\nexport class NotionCompatAPI {\n  client: Client\n\n  constructor(client: Client) {\n    this.client = client\n  }\n\n  public async getPage(rawPageId: string): Promise<notion.ExtendedRecordMap> {\n    const pageId = parsePageId(rawPageId)\n\n    const [page, block, children] = await Promise.all([\n      this.client.pages.retrieve({ page_id: pageId }),\n      this.client.blocks.retrieve({ block_id: pageId }),\n      this.getAllBlockChildren(pageId)\n    ])\n    const { blockMap, blockChildrenMap, pageMap, parentMap } =\n      await this.resolvePage(pageId)\n\n    const recordMap = convertPage({\n      pageId,\n      blockMap,\n      blockChildrenMap,\n      pageMap,\n      parentMap\n    })\n\n    ;(recordMap as any).raw = {\n      page,\n      block,\n      children\n    }\n\n    return recordMap\n  }\n\n  async resolvePage(\n    rootBlockId: string,\n    {\n      concurrency = 4\n    }: {\n      concurrency?: number\n    } = {}\n  ) {\n    const blockMap: types.BlockMap = {}\n    const pageMap: types.PageMap = {}\n    const parentMap: types.ParentMap = {}\n    const blockChildrenMap: types.BlockChildrenMap = {}\n    const pendingBlockIds = new Set<string>()\n    const queue = new PQueue({ concurrency })\n\n    const processBlock = async (\n      blockId: string,\n      { shallow = false }: { shallow?: boolean } = {}\n    ) => {\n      if (!blockId || pendingBlockIds.has(blockId)) {\n        return\n      }\n\n      pendingBlockIds.add(blockId)\n      queue.add(async () => {\n        try {\n          let partialBlock = blockMap[blockId]\n          if (!partialBlock) {\n            partialBlock = await this.client.blocks.retrieve({\n              block_id: blockId\n            })\n            blockMap[blockId] = partialBlock\n          }\n\n          const block = partialBlock as types.Block\n          if (block.type === 'child_page') {\n            if (!pageMap[blockId]) {\n              const partialPage = await this.client.pages.retrieve({\n                page_id: blockId\n              })\n\n              pageMap[blockId] = partialPage\n\n              const page = partialPage as types.Page\n              switch (page.parent?.type) {\n                case 'page_id':\n                  processBlock(page.parent.page_id, {\n                    shallow: true\n                  })\n                  if (!parentMap[blockId]) {\n                    parentMap[blockId] = page.parent.page_id\n                  }\n                  break\n\n                case 'database_id':\n                  processBlock(page.parent.database_id, {\n                    shallow: true\n                  })\n                  if (!parentMap[blockId]) {\n                    parentMap[blockId] = page.parent.database_id\n                  }\n                  break\n              }\n            }\n\n            if (blockId !== rootBlockId) {\n              // don't fetch children or recurse on subpages\n              return\n            }\n          }\n\n          if (shallow) {\n            return\n          }\n\n          const children = await this.getAllBlockChildren(blockId)\n          blockChildrenMap[blockId] = children.map((child) => child.id)\n\n          for (const child of children) {\n            const childBlock = child as types.Block\n            const mappedChildBlock = blockMap[child.id] as types.Block\n            if (\n              !mappedChildBlock ||\n              (!mappedChildBlock.type && childBlock.type)\n            ) {\n              blockMap[child.id] = childBlock\n              parentMap[child.id] = blockId\n\n              const details = childBlock[childBlock.type]\n              if (details?.rich_text) {\n                const richTextMentions = details.rich_text.filter(\n                  (richTextItem) => richTextItem.type === 'mention'\n                )\n\n                for (const richTextMention of richTextMentions) {\n                  switch (richTextMention.mention?.type) {\n                    case 'page': {\n                      const pageId = richTextMention.mention.page.id\n                      processBlock(pageId, { shallow: true })\n                      break\n                    }\n\n                    case 'database': {\n                      const databaseId = richTextMention.mention.database.id\n                      processBlock(databaseId, { shallow: true })\n                      break\n                    }\n                  }\n                }\n              }\n\n              if (childBlock.type === 'link_to_page') {\n                switch (childBlock.link_to_page?.type) {\n                  case 'page_id':\n                    processBlock(childBlock.link_to_page.page_id, {\n                      shallow: true\n                    })\n                    break\n\n                  case 'database_id':\n                    processBlock(childBlock.link_to_page.database_id, {\n                      shallow: true\n                    })\n                    break\n                }\n              }\n\n              if (\n                childBlock.has_children &&\n                childBlock.type !== 'child_database'\n              ) {\n                processBlock(childBlock.id)\n              }\n            }\n          }\n        } catch (err) {\n          console.warn('failed resolving block', blockId, err.message)\n        } finally {\n          pendingBlockIds.delete(blockId)\n        }\n      })\n    }\n\n    await processBlock(rootBlockId)\n    await queue.onIdle()\n\n    return {\n      blockMap,\n      blockChildrenMap,\n      pageMap,\n      parentMap\n    }\n  }\n\n  async getAllBlockChildren(blockId: string) {\n    let blocks: types.BlockChildren = []\n    let cursor: string\n\n    do {\n      const res = await this.client.blocks.children.list({\n        block_id: blockId,\n        start_cursor: cursor\n      })\n\n      blocks = blocks.concat(res.results)\n      cursor = res.next_cursor\n    } while (cursor)\n\n    return blocks\n  }\n}\n","import * as notion from 'notion-types'\n\nexport function convertColor(color: string): notion.Color {\n  switch (color) {\n    case 'green':\n      return 'teal'\n\n    case 'green_background':\n      return 'teal_background'\n\n    default:\n      return color as notion.Color\n  }\n}\n","import * as notion from 'notion-types'\n\nimport * as types from './types'\nimport { convertColor } from './convert-color'\n\nexport function convertRichText(richText: types.RichText): notion.Decoration[] {\n  return richText.map(convertRichTextItem).filter(Boolean)\n}\n\nexport function convertRichTextItem(\n  richTextItem: types.RichTextItem\n): notion.Decoration {\n  const subdecorations: notion.SubDecoration[] = []\n\n  if (richTextItem.annotations.bold) {\n    subdecorations.push(['b'])\n  }\n\n  if (richTextItem.annotations.italic) {\n    subdecorations.push(['i'])\n  }\n\n  if (richTextItem.annotations.strikethrough) {\n    subdecorations.push(['s'])\n  }\n\n  if (richTextItem.annotations.underline) {\n    subdecorations.push(['_'])\n  }\n\n  if (richTextItem.annotations.code) {\n    subdecorations.push(['c'])\n  }\n\n  if (richTextItem.annotations.color !== 'default') {\n    subdecorations.push(['h', convertColor(richTextItem.annotations.color)])\n  }\n\n  const details = richTextItem[richTextItem.type]\n  if (details) {\n    if (details.link) {\n      subdecorations.push(['a', details.link.url])\n    }\n  }\n\n  switch (richTextItem.type) {\n    case 'text': {\n      if (subdecorations.length) {\n        return [richTextItem.text.content, subdecorations]\n      } else {\n        return [richTextItem.text.content]\n      }\n    }\n\n    case 'equation':\n      if (richTextItem.equation?.expression) {\n        subdecorations.unshift(['e', richTextItem.equation.expression])\n      }\n\n      return ['⁍', subdecorations]\n\n    case 'mention': {\n      const { mention } = richTextItem\n\n      if (mention) {\n        switch (mention.type) {\n          case 'link_preview':\n            // TODO: this should be an eoi, but we don't hae the proper data\n            subdecorations.push(['a', mention.link_preview.url])\n            break\n\n          case 'page':\n            subdecorations.push(['p', mention.page.id])\n            return ['‣', subdecorations]\n\n          case 'database':\n            subdecorations.push(['p', mention.database.id])\n            return ['‣', subdecorations]\n\n          case 'date':\n            subdecorations.unshift([\n              'd',\n              {\n                type: 'date', // TODO\n                start_date: mention.date.start,\n                end_date: mention.date.end,\n                time_zone: mention.date.time_zone\n              }\n            ])\n            break\n\n          case 'user':\n            subdecorations.push(['u', mention.user.id])\n            break\n\n          case 'template_mention':\n            // TODO\n            // subdecorations.push(['m', mention.template_mention.type])\n            break\n\n          default:\n            // TODO\n            break\n        }\n      }\n\n      return [richTextItem.plain_text, subdecorations]\n    }\n\n    default:\n      return ['']\n  }\n}\n","export function convertTime(time?: string): number | undefined {\n  if (time) {\n    try {\n      return new Date(time).getTime()\n    } catch {\n      // ignore invalid time strings\n    }\n  }\n\n  return undefined\n}\n","import * as notion from 'notion-types'\n\nimport * as types from './types'\nimport { convertColor } from './convert-color'\nimport { convertRichText } from './convert-rich-text'\nimport { convertTime } from './convert-time'\n\nexport function convertBlock({\n  block: partialBlock,\n  children = [],\n  pageMap,\n  blockMap,\n  parentMap\n}: {\n  block: types.PartialBlock\n  children?: string[]\n  pageMap?: types.PageMap\n  blockMap?: types.BlockMap\n  parentMap?: types.ParentMap\n}): notion.Block {\n  const compatBlock: Partial<notion.BaseBlock> = {\n    id: partialBlock.id\n  }\n\n  if (children && children.length) {\n    compatBlock.content = children\n  }\n\n  const block = partialBlock as types.Block\n  if (!block.type) {\n    return compatBlock as notion.Block\n  }\n\n  compatBlock.properties = {}\n  compatBlock.format = {}\n  compatBlock.type = block.type\n  compatBlock.created_time = convertTime(block.created_time)\n  compatBlock.last_edited_time = convertTime(block.last_edited_time)\n  if (block.created_by) {\n    compatBlock.created_by_table = `notion_${block.created_by.object}`\n    compatBlock.created_by_id = block.created_by.id\n  }\n  compatBlock.last_edited_by_table = block.last_edited_by?.object\n  compatBlock.last_edited_by_id = block.last_edited_by?.id\n  compatBlock.alive = block.archived !== true\n\n  if (parentMap) {\n    const parentId = parentMap[block.id]\n\n    if (parentId) {\n      compatBlock.parent_id = parentId\n\n      const parentBlock = blockMap?.[parentId] as types.Block\n      if (parentBlock) {\n        switch (parentBlock.type) {\n          case 'child_database':\n            compatBlock.parent_table = 'table'\n            break\n\n          case 'child_page':\n          // fallthrough\n          default:\n            compatBlock.parent_table = 'block'\n            break\n        }\n      } else {\n        const parentPage = pageMap?.[parentId] as types.Page\n\n        if (parentPage) {\n          compatBlock.parent_table = 'block'\n        }\n      }\n    }\n  }\n\n  const blockDetails = block[block.type]\n  if (blockDetails) {\n    if (blockDetails.rich_text) {\n      compatBlock.properties.title = convertRichText(blockDetails.rich_text)\n    }\n\n    if (blockDetails.color) {\n      compatBlock.format.block_color = convertColor(blockDetails.color)\n    }\n\n    if (blockDetails.icon) {\n      switch (blockDetails.icon.type) {\n        case 'emoji':\n          compatBlock.format.page_icon = blockDetails.icon.emoji\n          break\n\n        case 'external':\n          compatBlock.format.page_icon = blockDetails.icon.external.url\n          break\n\n        case 'file':\n          compatBlock.format.page_icon = blockDetails.icon.file.url\n          break\n      }\n    }\n\n    if (blockDetails.type) {\n      switch (blockDetails.type) {\n        case 'external':\n          compatBlock.properties.source = [[blockDetails.external.url]]\n          break\n\n        case 'file':\n          compatBlock.properties.source = [[blockDetails.file.url]]\n          break\n      }\n    }\n  }\n\n  switch (block.type) {\n    case 'paragraph':\n      compatBlock.type = 'text'\n      if (!block.paragraph?.rich_text?.length) {\n        delete compatBlock.properties\n      }\n      break\n\n    case 'heading_1':\n      compatBlock.type = 'header'\n      break\n\n    case 'heading_2':\n      compatBlock.type = 'sub_header'\n      break\n\n    case 'heading_3':\n      compatBlock.type = 'sub_sub_header'\n      break\n\n    case 'bulleted_list_item':\n      compatBlock.type = 'bulleted_list'\n      break\n\n    case 'numbered_list_item':\n      compatBlock.type = 'numbered_list'\n      break\n\n    case 'quote':\n      // no-op\n      break\n\n    case 'to_do':\n      if (block.to_do?.checked) {\n        compatBlock.properties.checked = [['Yes']]\n      }\n      break\n\n    case 'toggle':\n      // no-op\n      break\n\n    case 'code':\n      if (block.code.language) {\n        compatBlock.properties.language = [[block.code.language]]\n      }\n      break\n\n    case 'callout':\n      // no-op\n      break\n\n    case 'file':\n      // no-op\n      break\n\n    case 'divider':\n      // no-op\n      break\n\n    case 'breadcrumb':\n      // TODO\n      break\n\n    case 'table_of_contents':\n      // no-op\n      break\n\n    case 'column_list':\n      // no-op\n      break\n\n    case 'column':\n      // no-op\n      break\n\n    case 'bookmark':\n      if (block.bookmark.url) {\n        compatBlock.properties.link = [[block.bookmark.url]]\n      }\n\n      if (block.bookmark.caption) {\n        compatBlock.properties.description = convertRichText(\n          block.bookmark.caption\n        )\n      }\n      break\n\n    case 'link_to_page':\n      compatBlock.type = 'alias'\n      switch (block.link_to_page?.type) {\n        case 'page_id':\n          compatBlock.format.alias_pointer = {\n            id: block.link_to_page.page_id,\n            table: 'block'\n          }\n          break\n\n        case 'database_id':\n          compatBlock.format.alias_pointer = {\n            id: block.link_to_page.database_id,\n            table: 'table'\n          }\n          break\n      }\n      break\n\n    case 'child_page': {\n      compatBlock.type = 'page'\n\n      if (pageMap) {\n        const page = pageMap[block.id] as types.Page\n        if (page) {\n          if (page.properties.title) {\n            compatBlock.properties.title = convertRichText(\n              (page.properties.title as any).title\n            )\n          }\n\n          if (page.cover) {\n            switch (page.cover.type) {\n              case 'external':\n                compatBlock.format.page_cover = page.cover.external.url\n                break\n\n              case 'file':\n                compatBlock.format.page_cover = page.cover.file.url\n                break\n            }\n\n            // TODO\n            compatBlock.format.page_cover_position = 0.5\n          }\n\n          if (page.icon) {\n            switch (page.icon.type) {\n              case 'emoji':\n                compatBlock.format.page_icon = page.icon.emoji\n                break\n\n              case 'external':\n                compatBlock.format.page_icon = page.icon.external.url\n                break\n\n              case 'file':\n                compatBlock.format.page_icon = page.icon.file.url\n                break\n            }\n          }\n\n          if (page.parent) {\n            switch (page.parent.type) {\n              case 'workspace':\n                compatBlock.parent_table = 'space'\n                break\n\n              case 'database_id':\n                compatBlock.parent_table = 'table'\n                break\n\n              case 'page_id':\n                compatBlock.parent_table = 'block'\n                break\n            }\n          }\n        }\n      }\n\n      if (block.child_page) {\n        if (block.child_page.title) {\n          compatBlock.properties.title = [[block.child_page.title]]\n        }\n      }\n\n      break\n    }\n\n    case 'template':\n      // TODO\n      break\n\n    case 'synced_block':\n      if (block.synced_block.synced_from) {\n        // TODO: handle block.synced_block.synced_from.type for non-block types\n        compatBlock.type = 'transclusion_reference'\n        compatBlock.format.transclusion_reference_pointer = {\n          id: block.synced_block.synced_from.block_id,\n          table: 'block'\n        }\n      } else {\n        compatBlock.type = 'transclusion_container'\n      }\n      break\n\n    case 'equation':\n      if (block.equation?.expression) {\n        compatBlock.properties.title = [[block.equation.expression]]\n      }\n      break\n\n    case 'child_database':\n      // TODO\n      break\n\n    case 'table':\n      if (blockDetails.table_width && blockDetails.table_width > 0) {\n        // There is no API to get the column ID. Used the index instead.\n        compatBlock.format.table_block_column_order = Array.from(\n          { length: blockDetails.table_width },\n          (_, i) => '' + i\n        )\n        compatBlock.format.table_block_column_format =\n          compatBlock.format.table_block_column_order.map((order) => {\n            return {\n              [order]: {\n                // TODO: The SimpleTable column has no width and color. API is not supported.\n                // width: 155,\n                // color:\n              }\n            }\n          })\n      }\n      if (blockDetails.has_column_header) {\n        compatBlock.format.table_block_column_header =\n          blockDetails.has_column_header\n      }\n      if (blockDetails.has_row_header) {\n        compatBlock.format.table_block_row_header = blockDetails.has_row_header\n      }\n      break\n\n    case 'table_row':\n      compatBlock.properties = {\n        ...block.table_row?.cells?.map((cell) => convertRichText(cell))\n      }\n      break\n\n    case 'pdf':\n      // TODO: formatting\n      compatBlock.format.block_page_width = true\n      compatBlock.format.block_height = '80vh'\n      break\n\n    case 'video': {\n      // TODO: formatting\n      compatBlock.format.block_page_width = true\n      compatBlock.format.block_aspect_ratio = 0.5620608899297423\n\n      try {\n        const url = compatBlock.properties.source?.[0]?.[0]\n\n        if (!url) break\n        const u = new URL(url)\n\n        switch (u.hostname) {\n          case 'loom.com':\n          case 'www.loom.com':\n            u.pathname = u.pathname.replace(/^\\/share\\//i, '/embed/')\n            compatBlock.format.display_source = u.toString()\n            break\n        }\n      } catch {\n        // ignore invalid urls\n      }\n      break\n    }\n\n    case 'embed': {\n      // TODO: embedding really needs to use some sort of externaly embed API like\n      // embedly or microlinkhq. Currently, many embed use cases will not work or\n      // display properly.\n      const url = block.embed?.url\n\n      // TODO: formatting\n      compatBlock.format.block_page_width = true\n      compatBlock.format.block_height = '30vh'\n\n      if (url) {\n        compatBlock.properties.source = [[url]]\n\n        try {\n          const u = new URL(url)\n\n          switch (u.hostname) {\n            case 'twitter.com':\n              compatBlock.type = 'tweet'\n              delete compatBlock.format\n              break\n\n            case 'maps.google.com':\n              compatBlock.type = 'maps'\n              break\n\n            case 'excalidraw.com':\n              compatBlock.type = 'excalidraw'\n              break\n\n            case 'codepen.io':\n              compatBlock.type = 'codepen'\n              break\n\n            case 'docs.google.com':\n            // fallthrough\n            case 'drive.google.com':\n              compatBlock.type = 'drive'\n\n              // TODO: fetch drive_properties\n              break\n\n            case 'figma.com':\n              compatBlock.type = 'figma'\n              break\n\n            case 'open.spotify.com':\n              if (\n                u.pathname.includes('/embed/') ||\n                u.pathname.includes('/embed-podcast/')\n              ) {\n                break\n              }\n\n              if (u.pathname.startsWith('/playlist/')) {\n                u.pathname = `/embed${u.pathname}`\n              } else if (u.pathname.startsWith('/episode/')) {\n                u.pathname = `/embed-podcast${u.pathname}`\n              }\n\n              u.search = ''\n              compatBlock.format.display_source = u.toString()\n              break\n\n            case 'airtable.com':\n              if (!u.pathname.startsWith('/embed/')) {\n                u.pathname = `/embed${u.pathname}`\n                compatBlock.format.display_source = u.toString()\n              }\n              break\n\n            case 'soundcloud.com':\n              // TODO\n              break\n          }\n        } catch {\n          // ignore invalid urls\n        }\n      }\n      break\n    }\n\n    case 'image':\n      // no-op\n      // TODO: handle formatting\n      break\n\n    case 'audio':\n      // no-op\n      break\n\n    case 'link_preview':\n      // TODO\n      break\n\n    case 'unsupported':\n      // no-op\n      break\n  }\n\n  return compatBlock as notion.Block\n}\n","import * as notion from 'notion-types'\n\nimport * as types from './types'\nimport { convertBlock } from './convert-block'\n\nexport function convertPage({\n  pageId,\n  blockMap,\n  blockChildrenMap,\n  pageMap,\n  parentMap\n}: {\n  pageId: string\n  blockMap: types.BlockMap\n  blockChildrenMap: types.BlockChildrenMap\n  pageMap: types.PageMap\n  parentMap: types.ParentMap\n}): notion.ExtendedRecordMap {\n  const compatBlocks = Object.values(blockMap).map((block) =>\n    convertBlock({\n      block,\n      children: blockChildrenMap[block.id],\n      pageMap,\n      blockMap,\n      parentMap\n    })\n  )\n\n  const compatPageBlock = convertPageBlock({\n    pageId,\n    blockMap,\n    blockChildrenMap,\n    pageMap,\n    parentMap\n  })\n\n  const compatPageBlocks = Object.keys(pageMap)\n    .filter((id) => id !== pageId)\n    .map((id) =>\n      convertPageBlock({\n        pageId: id,\n        blockMap,\n        blockChildrenMap,\n        pageMap,\n        parentMap\n      })\n    )\n\n  const compatBlockMap = [\n    compatPageBlock,\n    ...compatBlocks,\n    ...compatPageBlocks\n  ].reduce(\n    (blockMap, block) => ({\n      ...blockMap,\n      [block.id]: {\n        type: 'reader',\n        value: block\n      }\n    }),\n    {}\n  )\n\n  return {\n    block: compatBlockMap,\n    collection: {},\n    collection_view: {},\n    collection_query: {},\n    signed_urls: {},\n    notion_user: {}\n  }\n}\n\nexport function convertPageBlock({\n  pageId,\n  blockMap,\n  blockChildrenMap,\n  pageMap,\n  parentMap\n}: {\n  pageId: string\n  blockMap: types.BlockMap\n  blockChildrenMap: types.BlockChildrenMap\n  pageMap: types.PageMap\n  parentMap: types.ParentMap\n}): notion.Block | null {\n  const partialPage = pageMap[pageId]\n  const page = partialPage as types.Page\n\n  if (page) {\n    const compatPageBlock = convertBlock({\n      block: { ...page, type: 'child_page' } as unknown as types.Block,\n      children: blockChildrenMap[page.id],\n      pageMap,\n      blockMap,\n      parentMap\n    })\n\n    return compatPageBlock\n  }\n\n  return null\n}\n"],"mappings":"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","names":["blockMap"]}